#include"param.h"
#include<iostream>
using namespace std;

#define aux_debug_params 0

#define aux_define_param(type,name) static type p_##name; const type &name = p_##name;
#define aux_define_param_degree2rad(type,name) aux_define_param(type,name)
#define aux_define_param_filename(type,name) aux_define_param(type,name)

#define aux_load_param(nh,name)     if(nh.hasParam(#name)){nh.getParam(#name,PARAM::p_##name); if(aux_debug_params) cout<<#name<<" : "<<PARAM::name<<endl;} \
else{cout<<"ERROR: param:("<<#name<<") not found!"<<endl; return -1;}

#define aux_load_param_degree2rad(nh,name)     if(nh.hasParam(#name)){nh.getParam(#name,PARAM::p_##name); PARAM::p_##name=PARAM::p_##name/180.0*M_PI;} \
else{cout<<"ERROR: param:("<<#name<<") not found!"<<endl; return -1;}

#define aux_load_param_filename(nh,name)     if(nh.hasParam(#name)){nh.getParam(#name,PARAM::p_##name);\
 PARAM::p_##name=PARAM::file_name_prefix + PARAM::loop_param_k + "/" + PARAM::loop_id_str + "/" + PARAM::p_##name; \
if(aux_debug_params) cout<<#name<<" : "<<PARAM::name<<endl;} \
else{cout<<"ERROR: param:("<<#name<<") not found!"<<endl; return -1;}

namespace PARAM{       

    aux_define_param(double,     ros_rate_cruise)
    aux_define_param(double,     ros_rate_decision)
    aux_define_param(double,     ros_rate_path)
    aux_define_param(double,     ros_rate_tracking)
    aux_define_param(double,     map_memory_step_x)
    aux_define_param(double,     map_memory_step_y)
    aux_define_param(double,     map_memory_org_x)
    aux_define_param(double,     map_memory_org_y)
    aux_define_param(int,        cruise_circular_sample_count)
    aux_define_param(double,     cruise_velocity)
    aux_define_param(double,     cruise_height)
    aux_define_param(double,     interaction_height)
    aux_define_param(int,        m)
    aux_define_param(int,        n)
    aux_define_param(double,     const_tf)
    aux_define_param(double,     arena_size)
    aux_define_param(int,        list_capacity)
    aux_define_param(int,        taskslist_capacity)
    aux_define_param(int,   waypoint_dT_ms)
    aux_define_param(double,     velocity_obs)
    aux_define_param(double,     velocity_tgt)
    aux_define_param(double,     velocity_mav_max)
    aux_define_param(int,   task_period_ms)
    aux_define_param(int,        tree_search_max_depth)
    aux_define_param(double,     tree_search_gama)
    aux_define_param(double,     tree_search_gama_theta)
    aux_define_param(double,     tree_search_gama_distance)
    aux_define_param(double,     tree_search_gama_inner)
    aux_define_param(int,        tree_search_max_target_counts)
    aux_define_param(double,     ramda_t)
    aux_define_param(double,     ramda_t_S)
    aux_define_param(double,     ramda_t_E)
    aux_define_param(double,     ramda_t_A)
    aux_define_param(double,     ramda_t_SAE)
    aux_define_param(double,     ramda_t_y)
    aux_define_param(double,     ramda_t_theta)
    aux_define_param(double,     ramda_m)
    aux_define_param(double,     ramda_m_dis)
    aux_define_param(double,     ramda_m_i_op)
    aux_define_param(double,     ramda_o)
    aux_define_param(double,     ramda_o_s)
    aux_define_param(double,     ramda_o_a)
    aux_define_param(double,     ramda_cruise)
    aux_define_param(double,     radius_neary)
    aux_define_param(double,     radius_collision)
    aux_define_param(double,     radius_safe)
    aux_define_param(double,     radius_lidar)
    aux_define_param(int,        period_turn_ms)
    aux_define_param(int,        time_turn_180_ms)
    aux_define_param(int,        time_turn_45_ms)
    aux_define_param(int,        time_cruise_det_ms)
    aux_define_param(int,        time_turn_distinguish_ms)
    aux_define_param(int,        obstacle_time_forget_ms)
    aux_define_param(int,        target_time_forget_ms)
    aux_define_param(int,        edge_num_direction)
    aux_define_param(double,     edge_velocity_static)
    aux_define_param(double,     edge_time_one_edge)
    aux_define_param(double,     edge_nosolution_jump)
    aux_define_param(double,     edge_coef_angle)
    aux_define_param(double,     edge_bazier_rate)
    aux_define_param(double,     angle_field_rad)
    aux_define_param(double,     edge_angle_limited)
    aux_define_param(double,     edge_angle_de)
    aux_define_param(int,        loop_id)
    aux_define_param(int,        time_offset_ms)
    aux_define_param(double,     rand_tgt_average)
    aux_define_param(double,     rand_tgt_gauss)
    aux_define_param(double,     rand_tgt_gauss_variance)
    aux_define_param(double,     rand_obs_average)
    aux_define_param(double,     rand_obs_gauss)
    aux_define_param(double,     rand_obs_gauss_variance)
    aux_define_param(std::string, str_arena_frame)
    aux_define_param(std::string, file_name_prefix)
    aux_define_param(std::string, loop_param_k)
    aux_define_param(std::string, loop_id_str)

    aux_define_param_filename(std::string,file_name_lqr_plist)
    aux_define_param_filename(std::string,file_name_tracking)
    aux_define_param_filename(std::string,file_name_controller)
    aux_define_param_filename(std::string,file_name_path)
    aux_define_param_filename(std::string,file_name_path_env)
    aux_define_param_filename(std::string,file_name_task)
    aux_define_param_filename(std::string,file_name_task_env)
    aux_define_param_filename(std::string,file_name_map)
    aux_define_param_filename(std::string,file_name_bazier_in)
    aux_define_param_filename(std::string,file_name_bazier_out)
    aux_define_param_filename(std::string,file_name_edgemap)
    aux_define_param_filename(std::string,file_name_edgepath)
    aux_define_param_filename(std::string,file_name_timecost)
    aux_define_param_filename(std::string,file_name_ast_cruise)
    aux_define_param_filename(std::string,file_name_ast_path)
    aux_define_param_filename(std::string,file_name_ast_tracking)
    aux_define_param_filename(std::string,file_name_arena_info)
    aux_define_param_filename(std::string,file_name_arena_cmd_received)
    aux_define_param_filename(std::string,file_name_arena_cmd_sent)
    aux_define_param_filename(std::string,file_name_health)

int load_params(const ros::NodeHandle &nh){

    aux_load_param(nh, ros_rate_cruise)
    aux_load_param(nh, ros_rate_decision)
    aux_load_param(nh, ros_rate_path)
    aux_load_param(nh, ros_rate_tracking)
    aux_load_param(nh, map_memory_step_x)
    aux_load_param(nh, map_memory_step_y)
    aux_load_param(nh, map_memory_org_x)
    aux_load_param(nh, map_memory_org_y)
    aux_load_param(nh, cruise_circular_sample_count)
    aux_load_param(nh, cruise_velocity)
    aux_load_param(nh, cruise_height)
    aux_load_param(nh, interaction_height)
    aux_load_param(nh, m)
    aux_load_param(nh, n)
    aux_load_param(nh, const_tf)
    aux_load_param(nh, arena_size)
    aux_load_param(nh, list_capacity)
    aux_load_param(nh, taskslist_capacity)
    aux_load_param(nh, velocity_obs)
    aux_load_param(nh, velocity_tgt)
    aux_load_param(nh, velocity_mav_max)
    aux_load_param(nh, tree_search_max_depth)
    aux_load_param(nh, tree_search_gama)
    aux_load_param(nh, tree_search_gama_theta)
    aux_load_param(nh, tree_search_gama_distance)
    aux_load_param(nh, tree_search_gama_inner)
    aux_load_param(nh, tree_search_max_target_counts)
    aux_load_param(nh, ramda_t)
    aux_load_param(nh, ramda_t_S)
    aux_load_param(nh, ramda_t_E)
    aux_load_param(nh, ramda_t_A)
    aux_load_param(nh, ramda_t_SAE)
    aux_load_param(nh, ramda_t_y)
    aux_load_param(nh, ramda_t_theta)
    aux_load_param(nh, ramda_m)
    aux_load_param(nh, ramda_m_dis)
    aux_load_param(nh, ramda_m_i_op)
    aux_load_param(nh, ramda_o)
    aux_load_param(nh, ramda_o_s)
    aux_load_param(nh, ramda_o_a)
    aux_load_param(nh, ramda_cruise)
    aux_load_param(nh, radius_neary)
    aux_load_param(nh, radius_collision)
    aux_load_param(nh, radius_safe)
    aux_load_param(nh, radius_lidar)
    aux_load_param(nh, period_turn_ms)
    aux_load_param(nh, time_turn_180_ms)
    aux_load_param(nh, time_turn_45_ms)
    aux_load_param(nh, time_cruise_det_ms)
    aux_load_param(nh, time_turn_distinguish_ms)
    aux_load_param(nh, obstacle_time_forget_ms)
    aux_load_param(nh, target_time_forget_ms)
    aux_load_param(nh, edge_num_direction)
    aux_load_param(nh, edge_velocity_static)
    aux_load_param(nh, edge_time_one_edge)
    aux_load_param(nh, edge_nosolution_jump)
    aux_load_param(nh, edge_coef_angle)
    aux_load_param(nh, edge_bazier_rate)
    aux_load_param(nh, str_arena_frame)
    aux_load_param(nh, angle_field_rad)
    aux_load_param(nh, edge_angle_limited)
    aux_load_param(nh, edge_angle_de)
    aux_load_param(nh, loop_id)
    aux_load_param(nh, time_offset_ms)
    aux_load_param(nh, rand_tgt_average)
    aux_load_param(nh, rand_tgt_gauss)
    aux_load_param(nh, rand_tgt_gauss_variance)
    aux_load_param(nh, rand_obs_average)
    aux_load_param(nh, rand_obs_gauss)
    aux_load_param(nh, rand_obs_gauss_variance)

    aux_load_param(nh, str_arena_frame)
    aux_load_param(nh, file_name_prefix)
    aux_load_param(nh, loop_param_k)
    aux_load_param(nh, loop_id_str)

    aux_load_param_filename(nh, file_name_lqr_plist)
    aux_load_param_filename(nh, file_name_tracking)
    aux_load_param_filename(nh, file_name_controller)
    aux_load_param_filename(nh, file_name_path)
    aux_load_param_filename(nh, file_name_path_env)
    aux_load_param_filename(nh, file_name_task)
    aux_load_param_filename(nh, file_name_task_env)
    aux_load_param_filename(nh, file_name_map)
    aux_load_param_filename(nh, file_name_bazier_in)
    aux_load_param_filename(nh, file_name_bazier_out)
    aux_load_param_filename(nh, file_name_edgemap)
    aux_load_param_filename(nh, file_name_edgepath)
    aux_load_param_filename(nh, file_name_timecost)
    aux_load_param_filename(nh, file_name_ast_cruise)
    aux_load_param_filename(nh, file_name_ast_path)
    aux_load_param_filename(nh, file_name_ast_tracking)
    aux_load_param_filename(nh, file_name_arena_info)
    aux_load_param_filename(nh, file_name_arena_cmd_received)
    aux_load_param_filename(nh, file_name_arena_cmd_sent)
    aux_load_param_filename(nh, file_name_health)

    return 0;
}

};

